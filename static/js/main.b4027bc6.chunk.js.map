{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["seed","type","data","App","React","useState","latestData","setLatestData","rawHistories","setRawHistories","getInputValue","value","parseInt","document","querySelector","isNaN","useEffect","sendButton","resetButton","clickSendButton$","fromEvent","clickResetButton$","data$","pipe","mergeMap","Promise","resolve","resetData$","mapTo","reset","sum$","merge","startWith","scan","acc","currentValue","rawHistory$","subscribe","x","console","log","unsubscribe","className","id","placeholder","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAIMA,G,MAAO,CACXC,KAAM,SACNC,KAAM,IAEO,SAASC,IAAO,IAAD,EACQC,IAAMC,SAASL,GADvB,mBACrBM,EADqB,KACTC,EADS,OAEYH,IAAMC,SAAS,IAF3B,mBAErBG,EAFqB,KAEPC,EAFO,KAGtBC,EAAgB,WACpB,IAAMC,EAAQC,SAASC,SAASC,cAAc,UAAUH,MAAO,IAE/D,OADsBI,MAAMJ,GAAS,EAAIA,GAoD3C,OAjDAP,IAAMY,WAAU,WACd,IAAMC,EAAaJ,SAASC,cAAc,SACpCI,EAAcL,SAASC,cAAc,UACrCK,EAAmBC,YAAUH,EAAY,SACzCI,EAAoBD,YAAUF,EAAa,SAC3CI,EAAQH,EAAiBI,KAC7BC,aACE,kBACE,IAAIC,SAAQ,SAACC,GAAD,OACVA,EAAQ,CACNzB,KAAM,SACNC,KAAMQ,aAKViB,EAAaN,EAAkBE,KACnCK,YAAM,CACJ3B,KAAM,SACNC,KAAM,EACN2B,OAAO,KAGLC,EAAOC,YAAMT,EAAQK,GAAYJ,KACrCS,YAAUhC,GACViC,aACE,SAACC,EAAKC,GAAN,MAAwB,CACtBlC,KAAM,SACNC,KAAMiC,EAAaN,MAAQ,EAAGK,EAAIhC,KAAOiC,EAAajC,UAItDkC,EAAcd,EAAMC,KACxBU,aAAK,SAACC,EAAKC,GAAN,4BAA2BD,GAA3B,CAAgCC,MAAe,KAOtD,OALAL,EAAKO,WAAU,SAACC,GACdC,QAAQC,IAAIF,GACZ/B,EAAc+B,MAEhBF,EAAYC,WAAU,SAACC,GAAD,OAAO7B,EAAgB6B,MACtC,WACDR,GACFA,EAAKW,cAEHL,GACFN,EAAKW,iBAGR,IAED,yBAAKC,UAAU,OACb,kDACA,6BACA,2BAAOzC,KAAK,SAAS0C,GAAG,QAAQC,YAAY,kBAC5C,6BACA,6BACA,4BAAQD,GAAG,QAAX,2BACA,6BACA,6BACA,4BAAQA,GAAG,SAAX,SACA,6BACA,6BACA,6BACE,uCACA,oCAAUrC,EAAWL,MACrB,oDAA0BK,EAAWJ,OAEvC,6BACA,6BACA,6BACE,6CACA,+BAAK2C,KAAKC,UAAUtC,GAApB,MAEF,sDC7EcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.b4027bc6.chunk.js","sourcesContent":["import React from 'react';\nimport { fromEvent, merge } from \"rxjs\";\nimport { scan, mergeMap, mapTo, startWith } from \"rxjs/operators\";\nimport './App.scss';\nconst seed = {\n  type: \"Sample\",\n  data: 0\n};\nexport default function App() {\n  const [latestData, setLatestData] = React.useState(seed);\n  const [rawHistories, setRawHistories] = React.useState([]);\n  const getInputValue = () => {\n    const value = parseInt(document.querySelector(\"#input\").value, 10);\n    const formatedValue = isNaN(value) ? 0 : value;\n    return formatedValue;\n  };\n  React.useEffect(() => {\n    const sendButton = document.querySelector(\"#send\");\n    const resetButton = document.querySelector(\"#reset\");\n    const clickSendButton$ = fromEvent(sendButton, \"click\");\n    const clickResetButton$ = fromEvent(resetButton, \"click\");\n    const data$ = clickSendButton$.pipe(\n      mergeMap(\n        () =>\n          new Promise((resolve) =>\n            resolve({\n              type: \"Sample\",\n              data: getInputValue()\n            })\n          )\n      )\n    );\n    const resetData$ = clickResetButton$.pipe(\n      mapTo({\n        type: \"Sample\",\n        data: 0,\n        reset: true,\n      })\n    );\n    const sum$ = merge(data$ , resetData$).pipe(\n      startWith(seed),\n      scan(\n        (acc, currentValue) => ({\n          type: \"Sample\",\n          data: currentValue.reset ? 0: acc.data + currentValue.data,\n        })\n      )\n    );\n    const rawHistory$ = data$.pipe(\n      scan((acc, currentValue) => [...acc, currentValue], [])\n    );\n    sum$.subscribe((x) => {\n      console.log(x);\n      setLatestData(x);\n    });\n    rawHistory$.subscribe((x) => setRawHistories(x));\n    return () => {\n      if (sum$) {\n        sum$.unsubscribe();\n      }\n      if (rawHistory$) {\n        sum$.unsubscribe();\n      }\n    };\n  }, []);\n  return (\n    <div className=\"App\">\n      <h4>RX JS Scan and Sum</h4>\n      <br />\n      <input type=\"number\" id=\"input\" placeholder=\"Fill a number\"/>\n      <br />\n      <br />\n      <button id=\"send\">Click to send next data</button>\n      <br/>\n      <br/>\n      <button id=\"reset\">Reset</button>\n      <br />\n      <br />\n      <div>\n        <h5>Result:</h5>\n        <p>Type: {latestData.type}</p>\n        <p>Calculated Total Sum: {latestData.data}</p>\n      </div>\n      <br/>\n      <br/>\n      <div>\n        <h5>Raw History :</h5>\n        <p> {JSON.stringify(rawHistories)} </p>\n      </div>\n      <h4>â™¥ by Ayar Hlaine</h4>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}